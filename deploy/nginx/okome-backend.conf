# 80番でHTTP→HTTPSへリダイレクト
server {
  listen 80;
  listen [::]:80;
  server_name api.example.com;  # ←本番ドメインに置換

  # Let's Encrypt の ACME チャレンジ
  location /.well-known/acme-challenge/ {
    root /var/www/html;
  }

  location / {
    return 301 https://$host$request_uri;
  }
}

# 443/TLS 本体
server {
  listen 443 ssl http2;
  listen [::]:443 ssl http2;
  server_name api.example.com;  # ←本番ドメインに置換

  # 証明書は certbot が自動で設定/更新
  ssl_certificate     /etc/letsencrypt/live/api.example.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/api.example.com/privkey.pem;

  # セキュリティ系（最低限）
  add_header X-Content-Type-Options nosniff;
  add_header X-Frame-Options SAMEORIGIN;
  add_header Referrer-Policy no-referrer;

  # Webhook/通常API のボディ上限を Express と合わせる（2MB）
  client_max_body_size 2m;

  # バックエンド（Docker コンテナ）へ転送
  # ポイント：ホストの 127.0.0.1:4000 にだけ公開（外部には見せない）
  location / {
    proxy_pass http://127.0.0.1:4000;
    proxy_http_version 1.1;

    # プロキシ基本ヘッダ
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # タイムアウト（Webhook バーストやネット遅延の保険）
    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
  }

  # Webhook はリクエストのディスクバッファを避けて素直に流す（念のため）
  location /api/webhook {
    proxy_request_buffering off;
    proxy_pass http://127.0.0.1:4000;
    proxy_http_version 1.1;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
  }
}
