// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String
  email           String        @unique
  hashed_password String
  phone           String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  addresses       UserAddress[]
  orders          Order[]
  
  @@map("users")
}

model UserAddress {
  id             Int      @id @default(autoincrement())
  user_id        Int
  recipient_name String
  postal_code    String
  address_1      String
  address_2      String?
  phone          String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  orders         Order[]
  
  @@map("user_addresses")
}

enum OrderStatus {
  pending
  paid
  cancelled
}

enum FulfillStatus {
  unfulfilled
  fulfilled
}

model Order {
  id               Int           @id @default(autoincrement())
  user_id          Int
  address_id       Int
  shopify_order_id String        @unique
  total_price      Int
  status           OrderStatus   @default(pending)
  fulfill_status   FulfillStatus @default(unfulfilled)
  ordered_at       DateTime
  cancelled_at     DateTime?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  
  user             User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  address          UserAddress   @relation(fields: [address_id], references: [id])
  items            OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id         Int    @id @default(autoincrement())
  order_id   Int
  product_id String
  title      String
  quantity   Int
  price      Int
  image_url  String
  
  order      Order  @relation(fields: [order_id], references: [id], onDelete: Cascade)
  
  @@map("order_items")
}